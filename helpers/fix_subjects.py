# -*- coding: utf-8 -*-
"""\
This module adds missing subjects to cablemap.core, see
<https://github.com/heuer/cablemap/issues/15>
"""
import os
import re
import codecs
import urllib2
from cablemap.core.reader import parse_subject

# Pattern to extract the cable ids from <http://aebr.home.xs4all.nl/wl/*/>
_WL_CABLE_ID_PATTERN = re.compile(r'<a href="([0-9]{2}[A-Z]+[0-9]+)\.html">')

# Pattern to find the link to the Aftenposten article
_AP_SOURCE_PATTERN = re.compile(r'<a href="(http://www.aftenposten.no/spesial/wikileaksdokumenter/article[^"]+)">Aftenposten</a>')


_CABLE_ID_PATTERN = re.compile(r'^([0-9]{2}[A-Z]+[0-9]+):.*')

_AP_IRI = 'http://aebr.home.xs4all.nl/wl/aftenposten/'
_RR_IRI = 'http://aebr.home.xs4all.nl/wl/rusrep/'

_additional_subjects = {
    # Format:
    # Cable ID: (subject, source)
    }

_FILE_HEADER = u'''\
#
# Additional subjects which are missing from the official WikiLeaks Cablegate distribution.
# 
# Fixes issue <https://github.com/heuer/cablemap/issues/15>
#
# DO NOT EDIT this file, it is generated automatically.
# See <https://github.com/heuer/cablemap/blob/master/helpers/fix_subjects.py>
#
#
# Thanks to <http://aebr.home.xs4all.nl/wl/> for providing such a great source about cables.
#
#
# Format:
# # Source
# cable-id':'<SPACE>subject
#
'''

def _aftenposten_cable_ids():
    """\
    Returns a set of cable identifiers of cables published by Aftenposten.
    See: <http://aebr.home.xs4all.nl/wl/aftenposten/>
    """
    s = urllib2.urlopen(_AP_IRI).read()
    return set(_WL_CABLE_ID_PATTERN.findall(s))

def _russianreporter_cable_ids():
    """\
    Returns a set of cable identifiers of cables published by Russian Reporter.
    See <http://aebr.home.xs4all.nl/wl/rusrep/>
    """
    s = urllib2.urlopen(_RR_IRI).read()
    return set(_WL_CABLE_ID_PATTERN.findall(s))

def run_update():
    ap_cables = _aftenposten_cable_ids()
    rr_cables = _russianreporter_cable_ids()
    known_cables = ap_cables | rr_cables
    missing_subjects = _file_as_set(_FILE_MISSING_SUBJECTS)
    cable_ids = missing_subjects & known_cables
    for cable_id in cable_ids:
        if cable_id in ap_cables:
            source_iri = _AP_IRI + cable_id + '.html'
            page = urllib2.urlopen(source_iri).read().decode('utf-8', 'ignore')
            ap_iri = _AP_SOURCE_PATTERN.search(page).group(1)
            subject = parse_subject(page)
            if not subject:
                if cable_id == u'09OSLO399': # This cable is malformed
                    subject = u'NORWAYS RUSSIA POLICY: WISHFUL THINKING'
                else:
                    print '-------- ERROR, cannot parse subject of ' + source_iri
                    continue
            _additional_subjects[cable_id] = (subject, ap_iri)
        elif cable_id in rr_cables:
            source_iri = _RR_IRI + cable_id + '.html'
            page = urllib2.urlopen(source_iri).read().decode('utf-8', 'ignore')
            subject = parse_subject(page)
            if not subject:
                print '-------- ERROR, cannot parse subject of ' + source_iri
                continue
            _additional_subjects[cable_id] = (subject, source_iri)
    _write_fixed_subjects(_additional_subjects)


def _write_fixed_subjects(subjects):
    f = codecs.open(_FILE_SUBJECTS, 'wb', 'utf-8')
    f.write(_FILE_HEADER)
    for cable_id in sorted(subjects.keys()):
        subject, source = subjects[cable_id]
        f.write(u'# <%s>\n' % source)
        f.write(cable_id)
        f.write(u': ')
        f.write(subject)
        f.write('\n')

def _filename(name):
    return os.path.join(os.path.dirname(__file__), name)

def _file_in_core(name):
    return os.path.join(os.path.dirname(__file__), '..', 'cablemap.core', 'cablemap/core/', name)

def _file_as_set(filename):
    if not os.path.exists(filename):
        return set()
    f = codecs.open(filename, 'rb', 'utf-8')
    s = set((l.rstrip() for l in f))
    f.close()
    return s


_FILE_SUBJECTS = _file_in_core('subjects.txt')
_FILE_MISSING_SUBJECTS = _filename('no_subject.txt')
    
if __name__ == '__main__':
    run_update()
